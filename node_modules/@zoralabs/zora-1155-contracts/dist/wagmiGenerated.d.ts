export declare const erc20MinterABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.PremintSalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "duration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "buildSalesConfigForPremint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computePaidMintRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.RewardsSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "firstMinterReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rewardPct";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeTotalReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ethRewardAmount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCreateReferral";
    readonly outputs: readonly [{
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getERC20MinterConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getFirstMinter";
    readonly outputs: readonly [{
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_zoraRewardRecipientAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_rewardPct";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_ethReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "minterConfig";
    readonly outputs: readonly [{
        readonly name: "zoraRewardRecipientAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rewardRecipientPercentage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "setERC20MinterConfig";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "encodedPremintSalesConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setPremintSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalRewardPct";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "ERC20MinterConfigSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ERC20RewardsDeposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedToSendEthReward";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidCurrency";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidETHValue";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidValue";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PricePerTokenTooLow";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
export declare const iPremintDefinitionsABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "tokenConfigV1Definition";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "tokenConfigV2Definition";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfigV3";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "premintSalesConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "tokenConfigV3Definition";
    readonly outputs: readonly [];
}];
export declare const protocolRewardsABI: readonly [{
    readonly stateMutability: "payable";
    readonly type: "constructor";
    readonly inputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WITHDRAW_TYPEHASH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "reason";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipients";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "reasons";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "depositBatch";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "depositRewards";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdrawFor";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "withdrawWithSig";
    readonly outputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "reason";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "Deposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RewardsDeposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Withdraw";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ARRAY_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_DEPOSIT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_SIGNATURE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_WITHDRAW";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidShortString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SIGNATURE_DEADLINE_EXPIRED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TRANSFER_FAILED";
}];
export declare const upgradeGateABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isAllowedUpgrade";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredUpgradePath";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpls";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerUpgradePath";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeUpgradePath";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "UpgradeGateSetup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "UpgradeRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "UpgradeRemoved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}];
export declare const zoraCreator1155FactoryImplABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_zora1155Impl";
        readonly internalType: "contract IZoraCreator1155";
        readonly type: "address";
    }, {
        readonly name: "_merkleMinter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "_fixedPriceMinter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "_redeemMinterFactory";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "createContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "createContractDeterministic";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "defaultMinters";
    readonly outputs: readonly [{
        readonly name: "minters";
        readonly internalType: "contract IMinter1155[]";
        readonly type: "address[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "contractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "deterministicContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "contractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "deterministicContractAddressWithSetupActions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "fixedPriceMinter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "expectedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "getOrCreateContractDeterministic";
    readonly outputs: readonly [{
        readonly name: "calculatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "merkleMinter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "redeemMinterFactory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zora1155Impl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraCreator1155";
        readonly type: "address";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "calculatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractAlreadyExistsSkippingDeploy";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "FactorySetup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "newContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SetupNewContract";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Constructor_ImplCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "calculcatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ExpectedContractAddressDoesNotMatchCalculatedContractAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
export declare const zoraCreator1155ImplABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_mintFeeRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_upgradeGate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_protocolRewards";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CONTRACT_BASE_ID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_ADMIN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_FUNDS_MANAGER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_METADATA";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_MINTER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_SALES";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permissionBits";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addPermission";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "adminMint";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "lastTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "assumeLastTokenIdMatches";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "balanceOfBatch";
    readonly outputs: readonly [{
        readonly name: "batchBalances";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "burnBatch";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "callRenderer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "callSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintPrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeTotalReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "config";
    readonly outputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "__gap1";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }, {
        readonly name: "fundsRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "__gap2";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }, {
        readonly name: "transferHook";
        readonly internalType: "contract ITransferHookReceiver";
        readonly type: "address";
    }, {
        readonly name: "__gap3";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "createReferrals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "customRenderers";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "premintConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "premintVersion";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintSignerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "delegateSetupNewToken";
    readonly outputs: readonly [{
        readonly name: "newTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "delegatedTokenId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "firstMinters";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCreatorRewardRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCustomRenderer";
    readonly outputs: readonly [{
        readonly name: "customRenderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRoyalties";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getTokenInfo";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraCreator1155TypesV1.TokenData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isAdminOrRole";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "metadataRendererContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "minter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rewardsRecipients";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "nextTokenId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "permissions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newMaxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "reduceSupply";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permissionBits";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "removePermission";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "royalties";
    readonly outputs: readonly [{
        readonly name: "royaltyMintSchedule";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "royaltyBPS";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "royaltyRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salePrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "royaltyInfo";
    readonly outputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeBatchTransferFrom";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "fundsRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }];
    readonly name: "setFundsRecipient";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setOwner";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "renderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
    readonly name: "setTokenMetadataRenderer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "transferHook";
        readonly internalType: "contract ITransferHookReceiver";
        readonly type: "address";
    }];
    readonly name: "setTransferHook";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setupNewToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setupNewTokenWithCreateReferral";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "supportedPremintSignatureVersions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "_newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "updateContractMetadata";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "updateCreateReferral";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "updateRoyaltiesForToken";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_newURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "updateTokenURI";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "withdraw";
    readonly outputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "updater";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "updateType";
        readonly internalType: "enum IZoraCreator1155.ConfigUpdate";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "newConfig";
        readonly internalType: "struct IZoraCreator1155TypesV1.ContractConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "__gap1";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "__gap2";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "transferHook";
            readonly internalType: "contract ITransferHookReceiver";
            readonly type: "address";
        }, {
            readonly name: "__gap3";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }];
        readonly indexed: false;
    }];
    readonly name: "ConfigUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "updater";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ContractMetadataUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractRendererUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "structHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "domainName";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "CreatorAttribution";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "lastOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Purchased";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RendererUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SetupNewToken";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "TransferBatch";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "TransferSingle";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "URI";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "permissions";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "UpdatedPermissions";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "configuration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "UpdatedRoyalties";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenData";
        readonly internalType: "struct IZoraCreator1155TypesV1.TokenData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "UpdatedToken";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoRendererForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RendererNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}];
export declare const zoraCreator1155PremintExecutorImplABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_factory";
        readonly internalType: "contract IZoraCreator1155Factory";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "getContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "getContractWithAdditionalAdminsAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintContractConfigContractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isAuthorizedToCreatePremint";
    readonly outputs: readonly [{
        readonly name: "isAuthorized";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintContractConfigContractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "additionalAdmins";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "isAuthorizedToCreatePremintWithAdditionalAdmins";
    readonly outputs: readonly [{
        readonly name: "isAuthorized";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "isValid";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recoveredSigner";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collectionAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "premintCollection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "encodedPremintConfig";
        readonly internalType: "struct PremintConfigEncoded";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "premintConfigVersion";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "premint";
    readonly outputs: readonly [{
        readonly name: "premintResult";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "premintStatus";
    readonly outputs: readonly [{
        readonly name: "contractCreated";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "tokenIdForPremint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "premintV1";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "payoutRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "createReferral";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "premintV2";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "supportedPremintSignatureVersions";
    readonly outputs: readonly [{
        readonly name: "versions";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zora1155Factory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraCreator1155Factory";
        readonly type: "address";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "createdNewContract";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: true;
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly indexed: false;
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "quantityMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Preminted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "createdNewContract";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: true;
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "quantityMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "PremintedV2";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}];
export declare const zoraCreatorFixedPriceSaleStrategyABI: readonly [{
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
export declare const zoraCreatorMerkleMinterStrategyABI: readonly [{
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "allowedMerkles";
    readonly outputs: readonly [{
        readonly name: "presaleStart";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "presaleEnd";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "fundsRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "merkleSaleSettings";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "merkleSaleSettings";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MerkleClaimsExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
export declare const zoraCreatorRedeemMinterFactoryABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CONTRACT_BASE_ID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "createMinterIfNoneExists";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "doesRedeemMinterExistForCreatorContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getDeployedRedeemMinterForCreatorContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "predictMinterAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraRedeemMinterImplementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "creatorContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "minterContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RedeemMinterDeployed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
export declare const zoraCreatorRedeemMinterStrategyABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "hashes";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "clearRedeem";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "creatorContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_redeemInstructions";
        readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstructions";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintToken";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.MintToken";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }];
        }, {
            readonly name: "instructions";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstruction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdStart";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdEnd";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "transferRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "burnFunction";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }];
        }, {
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ethAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "redeemInstructionsHash";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "redeemInstructionsHashIsAllowed";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_redeemInstructions";
        readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstructions";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintToken";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.MintToken";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }];
        }, {
            readonly name: "instructions";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstruction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdStart";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdEnd";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "transferRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "burnFunction";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }];
        }, {
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ethAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setRedeem";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_redeemInstructions";
        readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstructions";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintToken";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.MintToken";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }];
        }, {
            readonly name: "instructions";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstruction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdStart";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdEnd";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "transferRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "burnFunction";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }];
        }, {
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ethAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "validateRedeemInstructions";
    readonly outputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "redeemsInstructionsHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[][]";
        readonly type: "uint256[][]";
        readonly indexed: false;
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[][]";
        readonly type: "uint256[][]";
        readonly indexed: false;
    }];
    readonly name: "RedeemProcessed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "redeemsInstructionsHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "data";
        readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstructions";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintToken";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.MintToken";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }];
        }, {
            readonly name: "instructions";
            readonly internalType: "struct ZoraCreatorRedeemMinterStrategy.RedeemInstruction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenType";
                readonly internalType: "enum ZoraCreatorRedeemMinterStrategy.TokenType";
                readonly type: "uint8";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdStart";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenIdEnd";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenContract";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "transferRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "burnFunction";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }];
        }, {
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ethAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "RedeemSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "redeemInstructionsHashes";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
        readonly indexed: true;
    }];
    readonly name: "RedeemsCleared";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "BurnFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotCreatorContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EmptyRedeemInstructions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectBurnOrTransferAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectMintAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectNumberOfTokenIds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidCreatorContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSaleEndOrStart";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenIdsForTokenType";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenType";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintTokenContractMustBeCreatorContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintTokenTypeMustBeERC1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MustBurnOrTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MustCallClearRedeem";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RedeemInstructionAlreadySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RedeemInstructionNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SenderIsNotTokenOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenIdOutOfRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
//# sourceMappingURL=wagmiGenerated.d.ts.map