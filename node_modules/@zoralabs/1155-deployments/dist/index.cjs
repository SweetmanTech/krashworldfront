"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// package/index.ts
var package_exports = {};
__export(package_exports, {
  chainConfigs: () => chainConfigs,
  zoraCreator1155FactoryImplABI: () => zoraCreator1155FactoryImplABI,
  zoraCreator1155FactoryImplAddress: () => zoraCreator1155FactoryImplAddress,
  zoraCreator1155FactoryImplConfig: () => zoraCreator1155FactoryImplConfig,
  zoraCreator1155ImplABI: () => zoraCreator1155ImplABI,
  zoraCreator1155PremintExecutorImplABI: () => zoraCreator1155PremintExecutorImplABI,
  zoraCreator1155PremintExecutorImplAddress: () => zoraCreator1155PremintExecutorImplAddress,
  zoraCreator1155PremintExecutorImplConfig: () => zoraCreator1155PremintExecutorImplConfig,
  zoraCreatorFixedPriceSaleStrategyABI: () => zoraCreatorFixedPriceSaleStrategyABI,
  zoraCreatorFixedPriceSaleStrategyAddress: () => zoraCreatorFixedPriceSaleStrategyAddress,
  zoraCreatorFixedPriceSaleStrategyConfig: () => zoraCreatorFixedPriceSaleStrategyConfig,
  zoraCreatorMerkleMinterStrategyABI: () => zoraCreatorMerkleMinterStrategyABI,
  zoraCreatorMerkleMinterStrategyAddress: () => zoraCreatorMerkleMinterStrategyAddress,
  zoraCreatorMerkleMinterStrategyConfig: () => zoraCreatorMerkleMinterStrategyConfig,
  zoraCreatorRedeemMinterFactoryABI: () => zoraCreatorRedeemMinterFactoryABI,
  zoraCreatorRedeemMinterFactoryAddress: () => zoraCreatorRedeemMinterFactoryAddress,
  zoraCreatorRedeemMinterFactoryConfig: () => zoraCreatorRedeemMinterFactoryConfig
});
module.exports = __toCommonJS(package_exports);

// package/wagmiGenerated.ts
var zoraCreator1155FactoryImplABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_zora1155Impl",
        internalType: "contract IZoraCreator1155",
        type: "address"
      },
      {
        name: "_merkleMinter",
        internalType: "contract IMinter1155",
        type: "address"
      },
      {
        name: "_fixedPriceMinter",
        internalType: "contract IMinter1155",
        type: "address"
      },
      {
        name: "_redeemMinterFactory",
        internalType: "contract IMinter1155",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "createContract",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "createContractDeterministic",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "defaultMinters",
    outputs: [
      {
        name: "minters",
        internalType: "contract IMinter1155[]",
        type: "address[]"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "contractAdmin", internalType: "address", type: "address" }
    ],
    name: "deterministicContractAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fixedPriceMinter",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "merkleMinter",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "redeemMinterFactory",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "zora1155Impl",
    outputs: [
      { name: "", internalType: "contract IZoraCreator1155", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  { type: "event", anonymous: false, inputs: [], name: "FactorySetup" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "defaultAdmin",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      }
    ],
    name: "SetupNewContract"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  { type: "error", inputs: [], name: "Constructor_ImplCannotBeZero" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var zoraCreator1155FactoryImplAddress = {
  1: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  5: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  10: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  420: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  8453: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  42161: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  84531: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  421614: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  7777777: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  11155111: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  999999999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021"
};
var zoraCreator1155FactoryImplConfig = {
  address: zoraCreator1155FactoryImplAddress,
  abi: zoraCreator1155FactoryImplABI
};
var zoraCreator1155ImplABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_mintFeeRecipient", internalType: "address", type: "address" },
      { name: "_upgradeGate", internalType: "address", type: "address" },
      { name: "_protocolRewards", internalType: "address", type: "address" }
    ]
  },
  { stateMutability: "payable", type: "receive" },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CONTRACT_BASE_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_ADMIN",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_FUNDS_MANAGER",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_METADATA",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_MINTER",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_SALES",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "user", internalType: "address", type: "address" },
      { name: "permissionBits", internalType: "uint256", type: "uint256" }
    ],
    name: "addPermission",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "adminMint",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "adminMintBatch",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "lastTokenId", internalType: "uint256", type: "uint256" }],
    name: "assumeLastTokenIdMatches",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [
      { name: "batchBalances", internalType: "uint256[]", type: "uint256[]" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "burnBatch",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "callRenderer",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "contract IMinter1155",
        type: "address"
      },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "callSale",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "numTokens", internalType: "uint256", type: "uint256" }],
    name: "computeFreeMintRewards",
    outputs: [
      {
        name: "",
        internalType: "struct RewardsSettings",
        type: "tuple",
        components: [
          { name: "creatorReward", internalType: "uint256", type: "uint256" },
          {
            name: "createReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "mintReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "firstMinterReward",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "zoraReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "numTokens", internalType: "uint256", type: "uint256" }],
    name: "computePaidMintRewards",
    outputs: [
      {
        name: "",
        internalType: "struct RewardsSettings",
        type: "tuple",
        components: [
          { name: "creatorReward", internalType: "uint256", type: "uint256" },
          {
            name: "createReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "mintReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "firstMinterReward",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "zoraReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "numTokens", internalType: "uint256", type: "uint256" }],
    name: "computeTotalReward",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "__gap1", internalType: "uint96", type: "uint96" },
      {
        name: "fundsRecipient",
        internalType: "address payable",
        type: "address"
      },
      { name: "__gap2", internalType: "uint96", type: "uint96" },
      {
        name: "transferHook",
        internalType: "contract ITransferHookReceiver",
        type: "address"
      },
      { name: "__gap3", internalType: "uint96", type: "uint96" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "createReferrals",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "customRenderers",
    outputs: [
      { name: "", internalType: "contract IRenderer1155", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "premintConfig", internalType: "bytes", type: "bytes" },
      { name: "premintVersion", internalType: "bytes32", type: "bytes32" },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "sender", internalType: "address", type: "address" }
    ],
    name: "delegateSetupNewToken",
    outputs: [{ name: "newTokenId", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint32", type: "uint32" }],
    name: "delegatedTokenId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "firstMinters",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getCreatorRewardRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getCustomRenderer",
    outputs: [
      {
        name: "customRenderer",
        internalType: "contract IRenderer1155",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getRoyalties",
    outputs: [
      {
        name: "",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getTokenInfo",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraCreator1155TypesV1.TokenData",
        type: "tuple",
        components: [
          { name: "uri", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          { name: "totalMinted", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "contractName", internalType: "string", type: "string" },
      { name: "newContractURI", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "isAdminOrRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "metadataRendererContract",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "minter", internalType: "contract IMinter1155", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      {
        name: "rewardsRecipients",
        internalType: "address[]",
        type: "address[]"
      },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "mint",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "mintFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "minter", internalType: "contract IMinter1155", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" },
      { name: "mintReferral", internalType: "address", type: "address" }
    ],
    name: "mintWithRewards",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextTokenId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "permissions",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "user", internalType: "address", type: "address" },
      { name: "permissionBits", internalType: "uint256", type: "uint256" }
    ],
    name: "removePermission",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "royalties",
    outputs: [
      { name: "royaltyMintSchedule", internalType: "uint32", type: "uint32" },
      { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
      { name: "royaltyRecipient", internalType: "address", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "salePrice", internalType: "uint256", type: "uint256" }
    ],
    name: "royaltyInfo",
    outputs: [
      { name: "receiver", internalType: "address", type: "address" },
      { name: "royaltyAmount", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeBatchTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "fundsRecipient",
        internalType: "address payable",
        type: "address"
      }
    ],
    name: "setFundsRecipient",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "renderer",
        internalType: "contract IRenderer1155",
        type: "address"
      }
    ],
    name: "setTokenMetadataRenderer",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "transferHook",
        internalType: "contract ITransferHookReceiver",
        type: "address"
      }
    ],
    name: "setTransferHook",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newURI", internalType: "string", type: "string" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "setupNewToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newURI", internalType: "string", type: "string" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" },
      { name: "createReferral", internalType: "address", type: "address" }
    ],
    name: "setupNewTokenWithCreateReferral",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "supportedPremintSignatureVersions",
    outputs: [{ name: "", internalType: "string[]", type: "string[]" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newURI", internalType: "string", type: "string" },
      { name: "_newName", internalType: "string", type: "string" }
    ],
    name: "updateContractMetadata",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "updateCreateReferral",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "newConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ],
    name: "updateRoyaltiesForToken",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "_newURI", internalType: "string", type: "string" }
    ],
    name: "updateTokenURI",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "updater",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "updateType",
        internalType: "enum IZoraCreator1155.ConfigUpdate",
        type: "uint8",
        indexed: true
      },
      {
        name: "newConfig",
        internalType: "struct IZoraCreator1155TypesV1.ContractConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "__gap1", internalType: "uint96", type: "uint96" },
          {
            name: "fundsRecipient",
            internalType: "address payable",
            type: "address"
          },
          { name: "__gap2", internalType: "uint96", type: "uint96" },
          {
            name: "transferHook",
            internalType: "contract ITransferHookReceiver",
            type: "address"
          },
          { name: "__gap3", internalType: "uint96", type: "uint96" }
        ],
        indexed: false
      }
    ],
    name: "ConfigUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "updater",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false }
    ],
    name: "ContractMetadataUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "renderer",
        internalType: "contract IRenderer1155",
        type: "address",
        indexed: false
      }
    ],
    name: "ContractRendererUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "structHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      },
      {
        name: "domainName",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "signature",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "CreatorAttribution"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "lastOwner",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Purchased"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "renderer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true }
    ],
    name: "RendererUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "maxSupply",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SetupNewToken"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      }
    ],
    name: "TransferBatch"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "TransferSingle"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true }
    ],
    name: "URI"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "permissions",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "UpdatedPermissions"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "configuration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      }
    ],
    name: "UpdatedRoyalties"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "tokenData",
        internalType: "struct IZoraCreator1155TypesV1.TokenData",
        type: "tuple",
        components: [
          { name: "uri", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          { name: "totalMinted", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "UpdatedToken"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER"
  },
  { type: "error", inputs: [], name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE" },
  { type: "error", inputs: [], name: "ERC1155_BURN_FROM_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_SETTING_APPROVAL_FOR_SELF" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER"
  },
  { type: "error", inputs: [], name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "NoRendererForToken"
  },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  {
    type: "error",
    inputs: [{ name: "renderer", internalType: "address", type: "address" }],
    name: "RendererNotValid"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreator1155PremintExecutorImplABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_factory",
        internalType: "contract IZoraCreator1155Factory",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      }
    ],
    name: "getContractAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "signer", internalType: "address", type: "address" },
      {
        name: "premintContractConfigContractAdmin",
        internalType: "address",
        type: "address"
      },
      { name: "contractAddress", internalType: "address", type: "address" }
    ],
    name: "isAuthorizedToCreatePremint",
    outputs: [{ name: "isAuthorized", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfig",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfig",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              {
                name: "royaltyMintSchedule",
                internalType: "uint32",
                type: "uint32"
              },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "royaltyRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignature",
    outputs: [
      { name: "isValid", internalType: "bool", type: "bool" },
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "recoveredSigner", internalType: "address", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "collectionAddress", internalType: "address", type: "address" }
    ],
    name: "mintFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfig",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfig",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              {
                name: "royaltyMintSchedule",
                internalType: "uint32",
                type: "uint32"
              },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "royaltyRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      { name: "mintComment", internalType: "string", type: "string" }
    ],
    name: "premint",
    outputs: [{ name: "newTokenId", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "uid", internalType: "uint32", type: "uint32" }
    ],
    name: "premintStatus",
    outputs: [
      { name: "contractCreated", internalType: "bool", type: "bool" },
      { name: "tokenIdForPremint", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfig",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfig",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              {
                name: "royaltyMintSchedule",
                internalType: "uint32",
                type: "uint32"
              },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "royaltyRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      {
        name: "mintArguments",
        internalType: "struct IZoraCreator1155PremintExecutor.MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      }
    ],
    name: "premintV1",
    outputs: [
      {
        name: "result",
        internalType: "struct IZoraCreator1155PremintExecutor.PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfigV2",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfigV2",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "payoutRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              },
              {
                name: "createReferral",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      {
        name: "mintArguments",
        internalType: "struct IZoraCreator1155PremintExecutor.MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      }
    ],
    name: "premintV2",
    outputs: [
      {
        name: "result",
        internalType: "struct IZoraCreator1155PremintExecutor.PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address" }
    ],
    name: "supportedPremintSignatureVersions",
    outputs: [{ name: "versions", internalType: "string[]", type: "string[]" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "zora1155Factory",
    outputs: [
      {
        name: "",
        internalType: "contract IZoraCreator1155Factory",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "createdNewContract",
        internalType: "bool",
        type: "bool",
        indexed: true
      },
      { name: "uid", internalType: "uint32", type: "uint32", indexed: false },
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ],
        indexed: false
      },
      {
        name: "tokenConfig",
        internalType: "struct TokenCreationConfig",
        type: "tuple",
        components: [
          { name: "tokenURI", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "mintStart", internalType: "uint64", type: "uint64" },
          { name: "mintDuration", internalType: "uint64", type: "uint64" },
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          },
          {
            name: "fixedPriceMinter",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "quantityMinted",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Preminted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "createdNewContract",
        internalType: "bool",
        type: "bool",
        indexed: true
      },
      { name: "uid", internalType: "uint32", type: "uint32", indexed: false },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "quantityMinted",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "PremintedV2"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  { type: "error", inputs: [], name: "INITIALIZABLE_CONTRACT_IS_INITIALIZING" },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreator1155PremintExecutorImplAddress = {
  1: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  5: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  10: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  420: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  8453: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  42161: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  84531: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  421614: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  7777777: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  11155111: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  999999999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340"
};
var zoraCreator1155PremintExecutorImplConfig = {
  address: zoraCreator1155PremintExecutorImplAddress,
  abi: zoraCreator1155PremintExecutorImplABI
};
var zoraCreatorFixedPriceSaleStrategyABI = [
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "wallet", internalType: "address", type: "address" }
    ],
    name: "getMintedPerWallet",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "resetSale",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ]
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "setSale",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "MintComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "mediaContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "salesConfig",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ],
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorFixedPriceSaleStrategyAddress = {
  1: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  5: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  10: "0x3678862f04290E565cCA2EF163BAeb92Bb76790C",
  420: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  999: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  8453: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  42161: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  84531: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  421614: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  7777777: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  11155111: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  999999999: "0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A"
};
var zoraCreatorFixedPriceSaleStrategyConfig = {
  address: zoraCreatorFixedPriceSaleStrategyAddress,
  abi: zoraCreatorFixedPriceSaleStrategyABI
};
var zoraCreatorMerkleMinterStrategyABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "allowedMerkles",
    outputs: [
      { name: "presaleStart", internalType: "uint64", type: "uint64" },
      { name: "presaleEnd", internalType: "uint64", type: "uint64" },
      { name: "fundsRecipient", internalType: "address", type: "address" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "wallet", internalType: "address", type: "address" }
    ],
    name: "getMintedPerWallet",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "resetSale",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "merkleSaleSettings",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "setSale",
    outputs: []
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "mediaContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "merkleSaleSettings",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MerkleClaimsExceeded" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorMerkleMinterStrategyAddress = {
  1: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  5: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  10: "0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8",
  420: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  999: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  8453: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  42161: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  84531: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  421614: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  7777777: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  11155111: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  999999999: "0x5e5fD4b758076BAD940db0284b711A67E8a3B88c"
};
var zoraCreatorMerkleMinterStrategyConfig = {
  address: zoraCreatorMerkleMinterStrategyAddress,
  abi: zoraCreatorMerkleMinterStrategyABI
};
var zoraCreatorRedeemMinterFactoryABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CONTRACT_BASE_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "createMinterIfNoneExists",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "doesRedeemMinterExistForCreatorContract",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "getDeployedRedeemMinterForCreatorContract",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "predictMinterAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "zoraRedeemMinterImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creatorContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "minterContract",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RedeemMinterDeployed"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorRedeemMinterFactoryAddress = {
  1: "0x78964965cF77850224513a367f899435C5B69174",
  5: "0x78964965cF77850224513a367f899435C5B69174",
  10: "0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2",
  420: "0x78964965cF77850224513a367f899435C5B69174",
  999: "0x78964965cF77850224513a367f899435C5B69174",
  8453: "0x78964965cF77850224513a367f899435C5B69174",
  42161: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  84531: "0x78964965cF77850224513a367f899435C5B69174",
  421614: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  7777777: "0x78964965cF77850224513a367f899435C5B69174",
  11155111: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  999999999: "0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6"
};
var zoraCreatorRedeemMinterFactoryConfig = {
  address: zoraCreatorRedeemMinterFactoryAddress,
  abi: zoraCreatorRedeemMinterFactoryABI
};

// package/chainConfigs.ts
var chainConfigs = {
  [1]: {
    "FACTORY_OWNER": "0xDB392f4391462d60B8B4413ef72018Ab595Af9D0",
    "MINT_FEE_RECIPIENT": "0xd1d1D4e36117aB794ec5d4c78cBD3a8904E691D0",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [10]: {
    "FACTORY_OWNER": "0x4c7f7b6067fac9a737ecf2ca1a733fc85dd65a2b",
    "MINT_FEE_RECIPIENT": "0x7A810DCd0f8d83B20212326813Db6EF7E9FD030c",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [11155111]: {
    "FACTORY_OWNER": "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    "MINT_FEE_RECIPIENT": "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [420]: {
    "FACTORY_OWNER": "0xbb45052B2260707655Dfd916a416264f5981192c",
    "MINT_FEE_RECIPIENT": "0x5dEe21327CD7CD6725C2578DA1c3E5bb2D2D34b2",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [42161]: {
    "FACTORY_OWNER": "0xF7DafC329C93D84267c0E7B146C0bD68807f6A03",
    "MINT_FEE_RECIPIENT": "0x10Fb02A68C3EA8bD439A6f515dcE07CC049f5c94",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [421614]: {
    "FACTORY_OWNER": "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    "MINT_FEE_RECIPIENT": "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [5]: {
    "FACTORY_OWNER": "0xDC498668B5e6CC518fD58A2ADBF614Fd3A13D3a0",
    "MINT_FEE_RECIPIENT": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [7777777]: {
    "FACTORY_OWNER": "0xdEA20c96253dc2d64897D2b8d27A8d935dE74955",
    "MINT_FEE_RECIPIENT": "0xEcfc2ee50409E459c554a2b0376F882Ce916D853",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [8453]: {
    "FACTORY_OWNER": "0x004d6611884B4A661749B64b2ADc78505c3e1AB3",
    "MINT_FEE_RECIPIENT": "0x7bf90111Ad7C22bec9E9dFf8A01A44713CC1b1B6",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [84531]: {
    "FACTORY_OWNER": "0x02539E813cA450C2c7334e885423f4A899a063Fe",
    "MINT_FEE_RECIPIENT": "0x02539E813cA450C2c7334e885423f4A899a063Fe",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [999]: {
    "FACTORY_OWNER": "0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252",
    "MINT_FEE_RECIPIENT": "0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  [999999999]: {
    "FACTORY_OWNER": "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    "MINT_FEE_RECIPIENT": "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    "PROTOCOL_REWARDS": "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  chainConfigs,
  zoraCreator1155FactoryImplABI,
  zoraCreator1155FactoryImplAddress,
  zoraCreator1155FactoryImplConfig,
  zoraCreator1155ImplABI,
  zoraCreator1155PremintExecutorImplABI,
  zoraCreator1155PremintExecutorImplAddress,
  zoraCreator1155PremintExecutorImplConfig,
  zoraCreatorFixedPriceSaleStrategyABI,
  zoraCreatorFixedPriceSaleStrategyAddress,
  zoraCreatorFixedPriceSaleStrategyConfig,
  zoraCreatorMerkleMinterStrategyABI,
  zoraCreatorMerkleMinterStrategyAddress,
  zoraCreatorMerkleMinterStrategyConfig,
  zoraCreatorRedeemMinterFactoryABI,
  zoraCreatorRedeemMinterFactoryAddress,
  zoraCreatorRedeemMinterFactoryConfig
});
//# sourceMappingURL=index.cjs.map